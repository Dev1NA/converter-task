{"version":3,"sources":["redux/slices/converter.tsx","components/CurrencyInput/CurrencyInput.tsx","components/Header/Header.tsx","components/Loader/Loader.tsx","components/NotFound/NotFound.tsx","components/Converter/Converter.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["fetchRates","createAsyncThunk","a","axios","get","process","data","rates","converterSlice","createSlice","name","initialState","amountFrom","amountTo","currencyFrom","currencyTo","loading","error","eur","uah","status","reducers","setRates","state","action","payload","setAmountTo","setAmountFrom","setCurrencyTo","setCurrencyFrom","setUAH","setEUR","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","converterData","converter","CurrencyInput","onAmountChange","onCurrencyChange","currencies","currency","amount","className","type","value","onChange","ev","target","map","i","Header","useSelector","toFixed","Loader","height","width","radius","color","ariaLabel","visible","NotFound","Converter","dispatch","useDispatch","format","number","handleAmountFromChange","getRates","useEffect","toString","Object","keys","App","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"0XAqCaA,EAAaC,YAA0B,yBAAV,sBAAoC,8BAAAC,EAAA,sEACrDC,IAAMC,IAAN,gEACoCC,qCAFiB,uBACpEC,EADoE,EACpEA,KADoE,kBAIrEA,EAAKC,OAJgE,4CAOxEC,EAAiBC,YAAY,CACjCC,KAAM,YACNC,aAxBmC,CACnCJ,MAAO,GACPK,WAAY,EACZC,SAAU,EACVC,aAAc,MACdC,WAAY,MACZC,SAAS,EACTC,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,OAAQ,WAeRC,SAAU,CACRC,SADQ,SACCC,EAAOC,GACdD,EAAMhB,MAAQiB,EAAOC,SAEvBC,YAJQ,SAIIH,EAAOC,GACjBD,EAAMV,SAAWW,EAAOC,SAE1BE,cAPQ,SAOMJ,EAAOC,GACnBD,EAAMX,WAAaY,EAAOC,SAE5BG,cAVQ,SAUML,EAAOC,GACnBD,EAAMR,WAAaS,EAAOC,SAE5BI,gBAbQ,SAaQN,EAAOC,GACrBD,EAAMT,aAAeU,EAAOC,SAE9BK,OAhBQ,SAgBDP,EAAOC,GACZD,EAAMJ,IAAMK,EAAOC,SAErBM,OAnBQ,SAmBDR,EAAOC,GACZD,EAAML,IAAMM,EAAOC,UAGvBO,cAAe,SAACC,GACdA,EAAQC,QAAQlC,EAAWmC,SAAS,SAACZ,GACnCA,EAAMH,OAAS,UACfG,EAAMhB,MAAQ,MAEhB0B,EAAQC,QAAQlC,EAAWoC,WAAW,SAACb,EAAOC,GAC5CD,EAAMH,OAAS,UACfG,EAAMhB,MAAQiB,EAAOC,QACrBF,EAAML,IAAMM,EAAOC,QAAP,IACZF,EAAMJ,IAAMK,EAAOC,QAAP,IACZF,EAAMV,SACHU,EAAMX,WAAaY,EAAOC,QAAQF,EAAMR,YAAeS,EAAOC,QAAQF,EAAMT,cAC/ES,EAAMX,WACHW,EAAMV,SAAWW,EAAOC,QAAQF,EAAMT,cAAiBU,EAAOC,QAAQF,EAAMR,eAEjFkB,EAAQC,QAAQlC,EAAWqC,UAAU,SAACd,GACpCA,EAAMH,OAAS,QACfG,EAAMhB,MAAQ,S,EAMlBC,EAAe8B,QADFZ,E,EAAAA,YAAaC,E,EAAAA,cAAeC,E,EAAAA,cAAeC,E,EAAAA,gBAE3CrB,G,EAF4Dc,SAE5Dd,EAAf,SACa+B,EAAgB,SAAChB,GAAD,OAAsBA,EAAMiB,W,eCtE1CC,EAfqC,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,eAAgBC,EAAqD,EAArDA,iBAAkBC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7G,OACE,sBAAKC,UAAU,QAAf,UACE,uBAAOC,KAAK,SAASC,MAAOH,EAAQI,SAAU,SAACC,GAAD,OAAQT,EAAeS,EAAGC,OAAOH,UAC/E,wBAAQA,MAAOJ,EAAUK,SAAU,SAACC,GAAD,OAAQR,EAAiBQ,EAAGC,OAAOH,QAAtE,SACGL,EAAWS,KAAI,SAACR,EAAUS,GAAX,OACd,wBAAgBL,MAAOJ,EAAvB,SACGA,GADUS,YCDRC,G,MAXU,WAAO,IAAD,EACRC,YAAYjB,GAAzBpB,EADqB,EACrBA,IAAKD,EADgB,EAChBA,IAEb,OACE,sBAAK6B,UAAU,SAAf,UACE,uCAAU5B,EAAIsC,QAAQ,MACtB,wCAAWtC,EAAMD,GAAKuC,QAAQ,W,QCQrBC,G,MAfU,WACvB,OACE,qBAAKX,UAAU,SAAf,SACE,cAAC,IAAD,CACEY,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,OACNC,UAAU,qBACVC,SAAS,QCJFC,G,MANE,WACf,OACE,oBAAIlB,UAAU,YAAd,uDC4FWmB,G,MA7Ea,WAAO,IAAD,EAC0CV,YAAYjB,GAA9EhC,EADwB,EACxBA,MAAOM,EADiB,EACjBA,SAAUD,EADO,EACPA,WAAYE,EADL,EACKA,aAAcC,EADnB,EACmBA,WAAYK,EAD/B,EAC+BA,OACzD+C,EAAWC,cAEXC,EAAS,SAACC,GACd,SAAkB,IAAPA,GAAY,KAGzB,SAASC,EAAuB3D,GAC9BuD,EAASzC,EAAY2C,EAAQzD,EAAaL,EAAMQ,GAAeR,EAAMO,MACrEqD,EAASxC,EAAcf,IAiBzB,IAAM4D,EAAQ,uCAAG,sBAAAtE,EAAA,sDACfiE,EAASnE,KADM,2CAAH,qDAiBd,OAbAyE,qBAAU,WACRD,MACC,IAEHC,qBAAU,WACR,GAAMlE,EAAO,CAETgE,EAAuB,MAI1B,CAAChE,IAGF,mCACc,YAAXa,EACC,cAAC,EAAD,IACa,UAAXA,EAAqB,cAAC,EAAD,IACvB,gCACE,cAAC,EAAD,IACA,sBAAK2B,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,CACEL,eAAgB6B,EAChB5B,iBA1CZ,SAAkC7B,GAChCqD,EAASzC,EAAY2C,EAAQzD,EAAaL,EAAMQ,GAAeR,EAAMO,MACrEqD,EAAStC,EAAgBf,EAAa4D,cAyC5B9B,WAAY+B,OAAOC,KAAKrE,GACxBuC,OAAQlC,EACRiC,SAAU/B,IAEZ,cAAC,EAAD,CACE4B,eA3CZ,SAA8B7B,GAC5BsD,EAASxC,EAAc0C,EAAQxD,EAAWN,EAAMO,GAAiBP,EAAMQ,MACvEoD,EAASzC,EAAYb,KA0CX8B,iBAxCZ,SAAgC5B,GAC9BoD,EAASxC,EAAc0C,EAAQxD,EAAWN,EAAMO,GAAiBP,EAAMQ,MACvEoD,EAASvC,EAAcb,EAAW2D,cAuCxB9B,WAAY+B,OAAOC,KAAKrE,GACxBuC,OAAQjC,EACRgC,SAAU9B,IAEZ,qBAAKgC,UAAU,SAAf,SACGnC,EAAa,IAAME,EAAe,MAAQD,EAAW,IAAME,cC5E3D8D,EARO,WACpB,OACE,mCACE,cAAC,EAAD,OCHOC,EAAQC,YAAe,CAClCC,QAAS,CACPxC,eCEJyC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.16f16cb1.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n\r\nimport axios from 'axios';\r\nimport { RootState } from '../store';\r\n\r\ntype objRate = {[key: string]: number};\r\n\r\n\r\ninterface converterSlice {\r\n  rates: objRate,\r\n  amountFrom: number,\r\n  amountTo: number,\r\n  currencyFrom: string,\r\n  currencyTo: string,\r\n  loading: boolean,\r\n  error: boolean,\r\n  eur: number,\r\n  uah: number,\r\n  status: string,\r\n}\r\n\r\nconst initialState: converterSlice = {\r\n  rates: {},\r\n  amountFrom: 1,\r\n  amountTo: 1,\r\n  currencyFrom: 'USD',\r\n  currencyTo: 'EUR',\r\n  loading: true,\r\n  error: false,\r\n  eur: 0,\r\n  uah: 0,\r\n  status: 'loading',\r\n};\r\n\r\n\r\n\r\nexport const fetchRates = createAsyncThunk<objRate>('rates/fetchRatesStatus', async () => {\r\n  const { data } = await axios.get<converterSlice>(\r\n    `https://api.apilayer.com/fixer/latest?base=USD&apikey=${process.env.REACT_APP_CURRENCY_API_KEY}`,\r\n  );\r\n  return data.rates;\r\n});\r\n\r\nconst converterSlice = createSlice({\r\n  name: 'converter',\r\n  initialState,\r\n  reducers: {\r\n    setRates(state, action: PayloadAction<objRate>) {\r\n      state.rates = action.payload;\r\n    },\r\n    setAmountTo(state, action: PayloadAction<number>) {\r\n      state.amountTo = action.payload;\r\n    },\r\n    setAmountFrom(state, action: PayloadAction<number>) {\r\n      state.amountFrom = action.payload;\r\n    },\r\n    setCurrencyTo(state, action: PayloadAction<string>) {\r\n      state.currencyTo = action.payload;\r\n    },\r\n    setCurrencyFrom(state, action: PayloadAction<string>) {\r\n      state.currencyFrom = action.payload;\r\n    },\r\n    setUAH(state, action: PayloadAction<number>) {\r\n      state.uah = action.payload;\r\n    },\r\n    setEUR(state, action: PayloadAction<number>) {\r\n      state.eur = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchRates.pending, (state) => {\r\n      state.status = 'loading';\r\n      state.rates = {};\r\n    });\r\n    builder.addCase(fetchRates.fulfilled, (state, action) => {\r\n      state.status = 'success';\r\n      state.rates = action.payload;\r\n      state.eur = action.payload['EUR'];\r\n      state.uah = action.payload['UAH'];\r\n      state.amountTo =\r\n        (state.amountFrom * action.payload[state.currencyTo]) / action.payload[state.currencyFrom];\r\n      state.amountFrom =\r\n        (state.amountTo * action.payload[state.currencyFrom]) / action.payload[state.currencyTo];\r\n    });\r\n    builder.addCase(fetchRates.rejected, (state) => {\r\n      state.status = 'error';\r\n      state.rates = {};\r\n    });\r\n  },\r\n});\r\n\r\nexport const { setAmountTo, setAmountFrom, setCurrencyTo, setCurrencyFrom, setRates } =\r\n  converterSlice.actions;\r\nexport default converterSlice.reducer;\r\nexport const converterData = (state: RootState) => state.converter;\r\n\r\n","import './currencyInput.css';\n\ntype CurrencyInputProps = {\n  onAmountChange: Function,\n  onCurrencyChange: Function,\n  currencies: string[],\n  currency: string,\n  amount: number,\n}\n\nconst CurrencyInput: React.FC<CurrencyInputProps> = ({ onAmountChange, onCurrencyChange, currencies, currency, amount }) => {\n  return (\n    <div className=\"group\">\n      <input type=\"number\" value={amount} onChange={(ev) => onAmountChange(ev.target.value)} />\n      <select value={currency} onChange={(ev) => onCurrencyChange(ev.target.value)}>\n        {currencies.map((currency, i: number) => (\n          <option key={i} value={currency}>\n            {currency}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\nexport default CurrencyInput;\n","import { useSelector } from 'react-redux';\r\nimport { converterData } from '../../redux/slices/converter';\r\nimport './header.css';\r\n\r\nconst Header: React.FC = () => {\r\n  const { uah, eur } = useSelector(converterData);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h2>USD: {uah.toFixed(2)}</h2>\r\n      <h2>EUR: {(uah / eur).toFixed(2)}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { ThreeDots } from 'react-loader-spinner';\r\nimport './loader.css';\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <ThreeDots\r\n        height=\"80\"\r\n        width=\"80\"\r\n        radius=\"9\"\r\n        color=\"#fff\"\r\n        ariaLabel=\"three-dots-loading\"\r\n        visible={true}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import './notfound.css'\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <h1 className='not-found'>Something went wrong. PLease try later.</h1>\r\n  )\r\n}\r\n\r\nexport default NotFound","// import { AsyncThunkAction, AsyncThunkAction, AsyncThunkAction } from '@reduxjs/toolkit';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  converterData,\r\n  fetchRates,\r\n  setAmountFrom,\r\n  setAmountTo,\r\n  setCurrencyFrom,\r\n  setCurrencyTo,\r\n} from '../../redux/slices/converter'\r\nimport { AppDispatch, useAppDispatch } from '../../redux/store';\r\n// '../../redux/slices/converter.ts';\r\nimport CurrencyInput from '../CurrencyInput/CurrencyInput';\r\nimport Header from '../Header/Header';\r\nimport Loader from '../Loader/Loader';\r\nimport NotFound from '../NotFound/NotFound';\r\nimport './converter.css';\r\n\r\nconst Converter: React.FC = () => {\r\n  const { rates, amountTo, amountFrom, currencyFrom, currencyTo, status } = useSelector(converterData);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const format = (number: number) => {\r\n    return (~~(number*100)/100);\r\n  }\r\n\r\n  function handleAmountFromChange(amountFrom: number) {\r\n    dispatch(setAmountTo(format((amountFrom * rates[currencyTo]) / rates[currencyFrom])));\r\n    dispatch(setAmountFrom(amountFrom));\r\n  }\r\n\r\n  function handleCurrencyFromChange(currencyFrom: number) {\r\n    dispatch(setAmountTo(format((amountFrom * rates[currencyTo]) / rates[currencyFrom])));\r\n    dispatch(setCurrencyFrom(currencyFrom.toString()));\r\n  }\r\n\r\n  function handleAmountToChange(amountTo: number) {\r\n    dispatch(setAmountFrom(format((amountTo * rates[currencyFrom]) / rates[currencyTo])));\r\n    dispatch(setAmountTo(amountTo));\r\n  }\r\n  function handleCurrencyToChange(currencyTo: number) {\r\n    dispatch(setAmountFrom(format((amountTo * rates[currencyFrom]) / rates[currencyTo])));\r\n    dispatch(setCurrencyTo(currencyTo.toString()));\r\n  }\r\n\r\n  const getRates = async () => {\r\n    dispatch(fetchRates());\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRates();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!!rates) {\r\n      const init = () => {\r\n        handleAmountFromChange(1);\r\n      }\r\n      init();\r\n    }\r\n  }, [rates]);\r\n\r\n  return (\r\n    <>\r\n      {status === 'loading' ? (\r\n        <Loader />\r\n      ) : status === 'error' ? <NotFound /> :(\r\n        <div>\r\n          <Header />\r\n          <div className=\"converter\">\r\n            <h1 className=\"title\">Currency Converter</h1>\r\n            <CurrencyInput\r\n              onAmountChange={handleAmountFromChange}\r\n              onCurrencyChange={handleCurrencyFromChange}\r\n              currencies={Object.keys(rates)}\r\n              amount={amountFrom}\r\n              currency={currencyFrom}\r\n            />\r\n            <CurrencyInput\r\n              onAmountChange={handleAmountToChange}\r\n              onCurrencyChange={handleCurrencyToChange}\r\n              currencies={Object.keys(rates)}\r\n              amount={amountTo}\r\n              currency={currencyTo}\r\n            />\r\n            <div className=\"result\">\r\n              {amountFrom + ' ' + currencyFrom + ' = ' + amountTo + ' ' + currencyTo}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Converter;\r\n","import './App.css';\nimport React from 'react';\nimport Converter from './components/Converter/Converter';\nconst App: React.FC = () => {\n  return (\n    <>\n      <Converter />\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport converter from './slices/converter';\r\nexport const store = configureStore({\r\n  reducer: {\r\n    converter,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}